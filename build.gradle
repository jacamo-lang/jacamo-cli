/*
   JaCaMo Command Line Interpreter build file
*/

defaultTasks 'createBin'

apply plugin: 'java-library'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

repositories {
    mavenCentral()

    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {
    api 'info.picocli:picocli-shell-jline3:4.7.0'
    api 'org.jline:jline:3.22.0'
    api 'org.fusesource.jansi:jansi:2.4.0'

    api 'org.gradle:gradle-tooling-api:8.6'
    //testImplementation group: 'junit', name: 'junit', version: '4.12'

    implementation 'org.slf4j:slf4j-nop:1.7.21' // to avoid warning msgs of SLF4J
}

jar {
    archiveBaseName = "jacamo-cli-${jacamoVersion}"
    manifest {
        attributes 'Main-Class': 'jacamo.cli.JaCaMoCLI',
                   'Specification-Title': 'JaCaMo CLI',
                   'Specification-Version': "${jacamoVersion}",
                   'Implementation-Version': new Date().toString()
    }
}

//// copy dep jars into build directory (maybe useful for running without the management of gradle)
//task copyJarsToBuild (dependsOn: jar) {
//    inputs.files configurations.runtimeClasspath.files
//    //inputs.dir   'src/main/resources/scripts'
//    outputs.dir  'build/libs'
//    //outputs.dir  'build/scripts'
//    doLast {
//        copy {
//            from configurations.runtimeClasspath
//            into 'build/libs'
//        }
//    }
//}

task run (type: JavaExec, dependsOn: 'build') {
    mainClass = 'jacamo.cli.JaCaMoCLI'
    standardInput = System.in
    classpath sourceSets.main.runtimeClasspath
}

task uberJar(type: Jar, dependsOn: ['classes']) {
    description 'creates a single runnable jar file with all dependencies'
    duplicatesStrategy 'exclude'

    manifest {
        attributes 'Main-Class': 'jacamo.cli.JaCaMoCLI',
                   'Specification-Title': 'JaCaMo CLI',
                   'Specification-Version': "${jacamoVersion}",
                   'Implementation-Version': new Date().toString()
    }
    archiveBaseName = "jacamo-cli-all-${jacamoVersion}"
    destinationDirectory = file('build/bin')
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task createBin (dependsOn: ['uberJar']) {
    def wdir = 'build/bin'
    doFirst {
        exec {
            commandLine '../../src/main/resources/scripts/create-bin.sh', 'jacamo-cli-all-' + "${jacamoVersion}" + '.jar'
            workingDir wdir
        }
    }
    doLast {
        copy {
            from 'src/main/resources/scripts/jacamo.sh'
            into wdir
        }
        copy {
            from 'build/bin/jacamo'
            into 'bin'
        }
    }
}

